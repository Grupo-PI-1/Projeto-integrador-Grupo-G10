import json
import os
from numpy import array as arr, dot, round as np_round
from numpy.linalg import inv

ARQUIVO_DADOS = "dados.json"
ARQUIVO_USUARIOS = "usuarios.json"
MATRIZ_CODIGO = [3, 6, 2, 76]  # Matriz para criptografia

# ------------------- CRIPTOGRAFIA -------------------
def Cadeia_txt(cad: list) -> str:
    def Num_to_Alpha(Vall: int) -> str:
        Alphabeto = {
            1: 'A', 2: 'B', 3: 'C', 4: 'D', 5: 'E', 6: 'F',
            7: 'G', 8: 'H', 9: 'I', 10: 'J', 11: 'K', 12: 'L',
            13: 'M', 14: 'N', 15: 'O', 16: 'P', 17: 'Q', 18: 'R',
            19: 'S', 20: 'T', 21: 'U', 22: 'V', 23: 'W', 24: 'X',
            25: 'Y', 26: 'Z', 0: ' ', 27: '#'
        }
        return Alphabeto[Vall % 28]

    return ''.join(Num_to_Alpha(val) for val in cad)

def Cadeia_num(cad: str) -> list:
    def Alpha_to_Num(Letter: str) -> int:
        Dicio = {
            'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6,
            'G': 7, 'H': 8, 'I': 9, 'J': 10, 'K': 11, 'L': 12,
            'M': 13, 'N': 14, 'O': 15, 'P': 16, 'Q': 17, 'R': 18,
            'S': 19, 'T': 20, 'U': 21, 'V': 22, 'W': 23, 'X': 24,
            'Y': 25, 'Z': 26, ' ': 0, '#': 27
        }
        return Dicio.get(Letter.upper(), 27)

    return [Alpha_to_Num(c) for c in cad]

def Cypher(Main_Matriz: list, Cadeia: str) -> str:
    work = Cadeia_num(Cadeia)
    if len(work) % 2 != 0:
        work.append(0)
    A, B = work[::2], work[1::2]
    work = arr([A, B], list)
    Main_Matriz = arr(Main_Matriz, int).reshape(2, 2)
    mult = dot(Main_Matriz, work)
    past = [val for pair in zip(mult[0], mult[1]) for val in pair]
    return Cadeia_txt(past)

def decypher(Main_Matriz: list, Cadeia: str) -> str:
    work = Cadeia_num(Cadeia)
    if len(work) % 2 != 0:
        work.append(0)
    A, B = work[::2], work[1::2]
    work = arr([A, B], list)
    Main_Matriz = arr(Main_Matriz, int).reshape(2, 2)
    try:
        inv_matriz = inv(Main_Matriz)
    except:
        print("Erro: matriz não inversível!")
        return ""
    mult = dot(inv_matriz, work)
    past = [int(round(val)) for pair in zip(mult[0], mult[1]) for val in pair]
    return Cadeia_txt(past).strip()

# ------------------- INTERFACE INICIAL -------------------
def nomes():
    print('+-----------------------------------------------------------------------+')
    print('|                                                                       |')
    print('|----------------------PROJETO INTEGRADOR - FASE 3----------------------|')
    print('|                                                                       |')
    print('| NOMES:           ABDALLAH ALI BORGES EL KHATIB   - 25018711          |') 
    print('|                  BERND LORENZ KUHNER JUNIOR      - 24008123          |')
    print('|                  MIRIA NASCIMENTO DOS ANJOS      - 25892704          |')
    print('|                  PEDRO ALENCAR BILIU VALE VIEIRA - 24015397          |')
    print('|                                                                       |')
    print('+-----------------------------------------------------------------------+')

# ------------------- USUÁRIOS -------------------
def carregar_usuarios():
    if os.path.exists(ARQUIVO_USUARIOS):
        with open(ARQUIVO_USUARIOS, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def salvar_usuarios(usuarios):
    with open(ARQUIVO_USUARIOS, "w", encoding="utf-8") as f:
        json.dump(usuarios, f, indent=4)

def cadastrar_usuario():
    usuarios = carregar_usuarios()
    nome = input("Crie um nome de usuário: ")
    if nome in usuarios:
        print("Nome de usuário já existe. Tente outro.")
        return None
    senha = input("Crie uma senha: ")
    senha_criptografada = Cypher(MATRIZ_CODIGO, senha)
    usuarios[nome] = senha_criptografada
    salvar_usuarios(usuarios)
    print("Usuário cadastrado com sucesso!")
    return nome

def login_usuario():
    usuarios = carregar_usuarios()
    nome = input("Usuário: ")
    senha = input("Senha: ")
    if nome in usuarios:
        senha_salva = usuarios[nome]
        senha_real = decypher(MATRIZ_CODIGO, senha_salva)
        if senha == senha_real:
            print(f"Login bem-sucedido! Bem-vindo(a), {nome}.")
            return nome
    print("Usuário ou senha incorretos.")
    return None

def recuperar_senha_debug():
    usuarios = carregar_usuarios()
    nome = input("Digite o nome do usuário para ver a senha descriptografada (debug): ")
    if nome in usuarios:
        senha_cript = usuarios[nome]
        senha_real = decypher(MATRIZ_CODIGO, senha_cript)
        print(f"Senha descriptografada de {nome}: {senha_real}")
    else:
        print("Usuário não encontrado.")

# ------------------- DADOS DO USUÁRIO -------------------
# ...
# Aqui continuam as funções: carregar_dados, salvar_dados,
# contatoCadastrado, input_transporte, inserir_dado, atualizar_dado,
# excluir_dado, listar_dados, menu — que não foram alteradas.
# ...

# ------------------- PROGRAMA INICIAL -------------------
def inicio():
    nomes()
    print("Bem-vindo ao sistema de sustentabilidade!")

    while True:
        print("\n1. Login")
        print("2. Cadastrar novo usuário")
        print("3. Recuperar senha (debug)")
        print("4. Sair")
        escolha = input("Escolha uma opção: ")

        if escolha == "1":
            user = login_usuario()
            if user:
                menu(user)
        elif escolha == "2":
            user = cadastrar_usuario()
            if user:
                menu(user)
        elif escolha == "3":
            recuperar_senha_debug()
        elif escolha == "4":
            print("Encerrando o programa. Até logo!")
            break
        else:
            print("Opção inválida. Tente novamente.")

inicio()
