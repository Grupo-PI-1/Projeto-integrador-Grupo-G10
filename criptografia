from numpy import array as arr, dot, linalg

# Função para transformar lista de números em string (alfabeto)
def Cadeia_txt(cad: list) -> str:
    def Num_to_Alpha(Vall: int) -> str:
        Alfabeto = {
            1: 'A', 2: 'B', 3: 'C', 4: 'D', 5: 'E', 6: 'F',
            7: 'G', 8: 'H', 9: 'I', 10: 'J', 11: 'K', 12: 'L',
            13: 'M', 14: 'N', 15: 'O', 16: 'P', 17: 'Q', 18: 'R',
            19: 'S', 20: 'T', 21: 'U', 22: 'V', 23: 'W', 24: 'X',
            25: 'Y', 26: 'Z', 0: ' ', 27: '#'
        }
        return Alfabeto[Vall % 28]

    return ''.join(Num_to_Alpha(val) for val in cad)

# Função para transformar string em lista de números
def Cadeia_num(cad: str) -> list:
    def Alpha_to_Num(Letter: str) -> int:
        Dicio = {
            'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6,
            'G': 7, 'H': 8, 'I': 9, 'J': 10, 'K': 11, 'L': 12,
            'M': 13, 'N': 14, 'O': 15, 'P': 16, 'Q': 17, 'R': 18,
            'S': 19, 'T': 20, 'U': 21, 'V': 22, 'W': 23, 'X': 24,
            'Y': 25, 'Z': 26, ' ': 0, '#': 27
        }
        return Dicio.get(Letter.upper(), 27)

    return [Alpha_to_Num(char) for char in cad]

# Função de criptografia
def Cypher(Main_Matriz: list, Cadeia: str) -> str:
    work = Cadeia_num(Cadeia)
    if len(work) % 2 != 0:
        work.append(0)

    A = work[::2]
    B = work[1::2]
    matriz = arr([A, B])
    Main_Matriz = arr(Main_Matriz).reshape(2, 2)
    mult = dot(Main_Matriz, matriz)

    resultado = []
    for a, b in zip(mult[0], mult[1]):
        resultado.extend([a, b])
    return Cadeia_txt(resultado)

# Função de descriptografia
def decypher(Main_Matriz: list, Cadeia: str) -> str:
    coded = Cadeia_num(Cadeia)
    if len(coded) % 2 != 0:
        coded.append(0)

    A = coded[::2]
    B = coded[1::2]
    matriz = arr([A, B])

    Main_Matriz = arr(Main_Matriz).reshape(2, 2)
    try:
        inversa = linalg.inv(Main_Matriz)
    except linalg.LinAlgError:
        raise ValueError("A matriz fornecida não é invertível.")

    resultado = dot(inversa, matriz).round().astype(int).tolist()
    flat = [val for pair in zip(resultado[0], resultado[1]) for val in pair]
    return Cadeia_txt(flat)

# Exemplo de uso
if __name__ == "__main__":
    chave = [3, 6, 2, 7]
    texto = input("Digite a mensagem para criptografar: ")
    criptografado = Cypher(chave, texto)
    print("Criptografado:", criptografado)
    print("Descriptografado:", decypher(chave, criptografado))
